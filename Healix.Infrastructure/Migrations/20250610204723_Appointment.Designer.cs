// <auto-generated />
using System;
using Healix.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Healix.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610204723_Appointment")]
    partial class Appointment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatMessageFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatMessageId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChatMessageId");

                    b.ToTable("ChatMessageFiles", (string)null);
                });

            modelBuilder.Entity("Clinic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Hotline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("Clinic", (string)null);
                });

            modelBuilder.Entity("DoctorSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly?>("FriFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("FriTo")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<TimeOnly?>("MonFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("MonTo")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("SatFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("SatTo")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("SunFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("SunTo")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("ThuFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("ThuTo")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("TueFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("TueTo")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("WedFrom")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly?>("WedTo")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId")
                        .IsUnique();

                    b.ToTable("DoctorSchedules", (string)null);
                });

            modelBuilder.Entity("Healix.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BloodType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<Guid?>("DoctorScheduleId")
                        .HasColumnType("uuid");

                    b.Property<string>("DoctorSpeciality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("FamilyGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("Fname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("Height")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("text");

                    b.Property<string>("PracticeLicenseUrl")
                        .HasColumnType("text");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Weight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FamilyGroupId");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Healix.Domain.Entities.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Day")
                        .HasColumnType("date");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("From")
                        .HasColumnType("time without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<TimeOnly>("To")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments", (string)null);
                });

            modelBuilder.Entity("Healix.Domain.Entities.ChatBot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ChatBots", (string)null);
                });

            modelBuilder.Entity("Healix.Domain.Entities.ChatMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsUser")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("ChatMessages", (string)null);
                });

            modelBuilder.Entity("Healix.Domain.Entities.FamilyGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FamilyGroups", (string)null);
                });

            modelBuilder.Entity("Healix.Domain.Entities.PatientRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Allergen")
                        .HasColumnType("text");

                    b.Property<string>("AllergyStatus")
                        .HasColumnType("text");

                    b.Property<string>("ClinicName")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<string>("DiseaseName")
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .HasColumnType("text");

                    b.Property<string>("FacilityName")
                        .HasColumnType("text");

                    b.Property<string>("FamilyInfectionSpreadLevel")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool?>("IsFirstTime")
                        .HasColumnType("boolean");

                    b.Property<string>("LastTimeDiagnosed")
                        .HasColumnType("text");

                    b.Property<string>("LogType")
                        .HasColumnType("text");

                    b.Property<string>("MedicalDiagnoses")
                        .HasColumnType("text");

                    b.Property<string>("MedicalHistoryType")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProcedureName")
                        .HasColumnType("text");

                    b.Property<string>("ReactionSeverity")
                        .HasColumnType("text");

                    b.Property<string>("RiskLevel")
                        .HasColumnType("text");

                    b.Property<string>("ScanName")
                        .HasColumnType("text");

                    b.Property<string>("ScanType")
                        .HasColumnType("text");

                    b.Property<string>("ScannedPart")
                        .HasColumnType("text");

                    b.Property<string>("Speciality")
                        .HasColumnType("text");

                    b.Property<string>("SupervisedBy")
                        .HasColumnType("text");

                    b.Property<string>("TestName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PatientId");

                    b.ToTable("PatientRecords", (string)null);
                });

            modelBuilder.Entity("Medicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Frequency")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PatientRecordId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("PatientRecordId");

                    b.ToTable("Medicines", (string)null);
                });

            modelBuilder.Entity("Otp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("Expiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Otps", (string)null);
                });

            modelBuilder.Entity("UploadedFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FileUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid>("PatientRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PatientRecordId");

                    b.ToTable("UploadedFiles", (string)null);
                });

            modelBuilder.Entity("UserChronicDisease", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserChronicDiseases", (string)null);
                });

            modelBuilder.Entity("ChatMessageFile", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ChatMessage", "ChatMessage")
                        .WithMany("Files")
                        .HasForeignKey("ChatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChatMessage");
                });

            modelBuilder.Entity("Clinic", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ApplicationUser", "Doctor")
                        .WithOne("Clinic")
                        .HasForeignKey("Clinic", "DoctorId");

                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("ClinicId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Lat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Latitude");

                            b1.Property<string>("Long")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Longitude");

                            b1.HasKey("ClinicId");

                            b1.ToTable("Clinic");

                            b1.WithOwner()
                                .HasForeignKey("ClinicId");
                        });

                    b.Navigation("Doctor");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("DoctorSchedule", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ApplicationUser", "Doctor")
                        .WithOne("DoctorSchedule")
                        .HasForeignKey("DoctorSchedule", "DoctorId");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Healix.Domain.Entities.ApplicationUser", b =>
                {
                    b.HasOne("Healix.Domain.Entities.FamilyGroup", "FamilyGroup")
                        .WithMany("Members")
                        .HasForeignKey("FamilyGroupId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.OwnsOne("Location", "Location", b1 =>
                        {
                            b1.Property<Guid>("ApplicationUserId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Lat")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Latitude");

                            b1.Property<string>("Long")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("Longitude");

                            b1.HasKey("ApplicationUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationUserId");
                        });

                    b.Navigation("FamilyGroup");

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("Healix.Domain.Entities.Appointment", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ApplicationUser", "Doctor")
                        .WithMany("DoctorAppointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Healix.Domain.Entities.ApplicationUser", "Patient")
                        .WithMany("PatientAppointments")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Healix.Domain.Entities.ChatBot", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ApplicationUser", "User")
                        .WithMany("ChatBots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Healix.Domain.Entities.ChatMessage", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ChatBot", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Healix.Domain.Entities.PatientRecord", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ApplicationUser", "Patient")
                        .WithMany("PatientRecords")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("Medicine", b =>
                {
                    b.HasOne("Healix.Domain.Entities.PatientRecord", "PatientRecord")
                        .WithMany("Medicines")
                        .HasForeignKey("PatientRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientRecord");
                });

            modelBuilder.Entity("UploadedFile", b =>
                {
                    b.HasOne("Healix.Domain.Entities.PatientRecord", "PatientRecord")
                        .WithMany("Files")
                        .HasForeignKey("PatientRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientRecord");
                });

            modelBuilder.Entity("UserChronicDisease", b =>
                {
                    b.HasOne("Healix.Domain.Entities.ApplicationUser", "User")
                        .WithMany("ChronicDiseases")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Healix.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("ChatBots");

                    b.Navigation("ChronicDiseases");

                    b.Navigation("Clinic")
                        .IsRequired();

                    b.Navigation("DoctorAppointments");

                    b.Navigation("DoctorSchedule")
                        .IsRequired();

                    b.Navigation("PatientAppointments");

                    b.Navigation("PatientRecords");
                });

            modelBuilder.Entity("Healix.Domain.Entities.ChatBot", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("Healix.Domain.Entities.ChatMessage", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("Healix.Domain.Entities.FamilyGroup", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("Healix.Domain.Entities.PatientRecord", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Medicines");
                });
#pragma warning restore 612, 618
        }
    }
}
